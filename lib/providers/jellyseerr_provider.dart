import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:jellyfish/models/jellyseerr_models.dart';
import 'package:jellyfish/services/jellyseerr_service.dart';
import 'package:jellyfish/services/storage_service.dart';
import 'package:flutter/foundation.dart';

import 'services_provider.dart';

/// Provider pour l'√©tat d'authentification Jellyseerr
final jellyseerrAuthStateProvider =
    NotifierProvider<JellyseerrAuthNotifier, JellyseerrAuthState>(() {
  return JellyseerrAuthNotifier();
});

/// Provider pour la liste des requ√™tes
final jellyseerrRequestsProvider = FutureProvider.autoDispose
    .family<JellyseerrRequestsResponse, RequestsFilter>((ref, filter) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getRequests(
    take: filter.take,
    skip: filter.skip,
    filter: filter.filter,
    sort: filter.sort,
  );
});

/// Provider pour la recherche de m√©dias
final jellyseerrSearchProvider = FutureProvider.autoDispose
    .family<SearchResponse, String>((ref, query) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.searchMedia(query);
});

/// Provider pour les m√©dias trending
final jellyseerrTrendingProvider = FutureProvider.autoDispose
    .family<SearchResponse, int>((ref, page) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getTrending(page: page);
});

/// Provider pour les films populaires
final jellyseerrPopularMoviesProvider = FutureProvider.autoDispose
    .family<SearchResponse, int>((ref, page) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getPopularMovies(page: page);
});

/// Provider pour les s√©ries TV populaires
final jellyseerrPopularTvProvider = FutureProvider.autoDispose
    .family<SearchResponse, int>((ref, page) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getPopularTv(page: page);
});

/// Provider pour les d√©tails d'un film
final jellyseerrMovieDetailsProvider = FutureProvider.autoDispose
    .family<MovieDetails, int>((ref, movieId) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getMovieDetails(movieId);
});

/// Provider pour les d√©tails d'une s√©rie TV
final jellyseerrTvDetailsProvider = FutureProvider.autoDispose
    .family<TvDetails, int>((ref, tvId) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getTvDetails(tvId);
});

/// Provider pour les recommandations d'un film
final jellyseerrMovieRecommendationsProvider = FutureProvider.autoDispose
    .family<SearchResponse, ({int id, int page})>((ref, params) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getMovieRecommendations(params.id, page: params.page);
});

/// Provider pour les recommandations d'une s√©rie TV
final jellyseerrTvRecommendationsProvider = FutureProvider.autoDispose
    .family<SearchResponse, ({int id, int page})>((ref, params) async {
  final authState = ref.watch(jellyseerrAuthStateProvider);

  if (!authState.isAuthenticated) {
    throw Exception('Non authentifi√©');
  }

  final service = ref.read(jellyseerrServiceProvider);
  return await service.getTvRecommendations(params.id, page: params.page);
});

/// Filtre pour les requ√™tes
class RequestsFilter {
  final int take;
  final int skip;
  final String? filter;
  final String? sort;

  const RequestsFilter({
    this.take = 20,
    this.skip = 0,
    this.filter,
    this.sort,
  });

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is RequestsFilter &&
          runtimeType == other.runtimeType &&
          take == other.take &&
          skip == other.skip &&
          filter == other.filter &&
          sort == other.sort;

  @override
  int get hashCode =>
      take.hashCode ^ skip.hashCode ^ filter.hashCode ^ sort.hashCode;
}

/// √âtat d'authentification Jellyseerr
class JellyseerrAuthState {
  final bool isAuthenticated;
  final JellyseerrAuthResponse? user;
  final String? errorMessage;
  final bool isLoading;

  const JellyseerrAuthState({
    required this.isAuthenticated,
    this.user,
    this.errorMessage,
    this.isLoading = false,
  });

  factory JellyseerrAuthState.initial() {
    return const JellyseerrAuthState(
      isAuthenticated: false,
      isLoading: false,
    );
  }

  factory JellyseerrAuthState.loading() {
    return const JellyseerrAuthState(
      isAuthenticated: false,
      isLoading: true,
    );
  }

  factory JellyseerrAuthState.authenticated(JellyseerrAuthResponse user) {
    return JellyseerrAuthState(
      isAuthenticated: true,
      user: user,
      isLoading: false,
    );
  }

  factory JellyseerrAuthState.unauthenticated([String? errorMessage]) {
    return JellyseerrAuthState(
      isAuthenticated: false,
      errorMessage: errorMessage,
      isLoading: false,
    );
  }
}

/// Notifier pour g√©rer l'√©tat d'authentification Jellyseerr
class JellyseerrAuthNotifier extends Notifier<JellyseerrAuthState> {
  late final StorageService _storageService;
  late final JellyseerrService _jellyseerrService;

  @override
  JellyseerrAuthState build() {
    _storageService = ref.read(storageServiceProvider);
    _jellyseerrService = ref.read(jellyseerrServiceProvider);
    return JellyseerrAuthState.initial();
  }

  /// Configure le serveur Jellyseerr
  Future<void> configureServer(String serverUrl) async {
    try {
      debugPrint('üîß Configuration du serveur Jellyseerr: $serverUrl');

      // Sauvegarder l'URL du serveur
      await _storageService.saveJellyseerrServerUrl(serverUrl);

      // Initialiser le client
      _jellyseerrService.initializeClient(serverUrl);

      debugPrint('‚úÖ Serveur Jellyseerr configur√©');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la configuration du serveur: $e');
      rethrow;
    }
  }

  /// Connexion avec les credentials Jellyfin
  Future<void> login(String username, String password) async {
    debugPrint('\nüöÄ ========== D√âBUT LOGIN JELLYSEERR ==========');
    debugPrint('üë§ Username: $username');
    debugPrint('üîí Password: ${password.replaceAll(RegExp(r'.'), '*')} (${password.length} caract√®res)');

    state = JellyseerrAuthState.loading();

    try {
      // V√©rifier que le serveur est configur√©
      final serverUrl = _storageService.getJellyseerrServerUrl();
      if (serverUrl == null) {
        throw Exception('Serveur Jellyseerr non configur√©');
      }

      debugPrint('\nüîê Tentative d\'authentification...');
      // Authentification avec l'API Jellyseerr
      final (authResponse, cookie) =
          await _jellyseerrService.authenticate(username, password);
      debugPrint('‚úÖ Authentification r√©ussie !');
      debugPrint('   User ID: ${authResponse.id}');
      debugPrint('   Display Name: ${authResponse.displayName}');

      debugPrint('\nüíæ Sauvegarde du cookie...');
      // Sauvegarder le cookie
      await _storageService.saveJellyseerrCookie(cookie);
      debugPrint('   ‚úì Cookie sauvegard√©');

      // Mettre √† jour l'√©tat
      state = JellyseerrAuthState.authenticated(authResponse);
      debugPrint('\n‚úÖ ========== LOGIN JELLYSEERR R√âUSSI ==========\n');
    } catch (e, stackTrace) {
      debugPrint('\n‚ùå ========== ERREUR LOGIN JELLYSEERR ==========');
      debugPrint('‚ùå Erreur: $e');
      debugPrint('üìö Stack trace:');
      debugPrint(stackTrace.toString());
      debugPrint('‚ùå ====================================\n');

      state = JellyseerrAuthState.unauthenticated(
          'Erreur de connexion: ${e.toString()}');
      rethrow;
    }
  }

  /// D√©connexion
  Future<void> logout() async {
    try {
      debugPrint('üëã D√©connexion de Jellyseerr');
      await _storageService.clearJellyseerr();
      state = JellyseerrAuthState.unauthenticated();
      debugPrint('‚úÖ D√©connexion r√©ussie');
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la d√©connexion: $e');
      rethrow;
    }
  }

  /// V√©rifie et restaure la session si elle existe
  Future<void> checkSession() async {
    debugPrint('üîç V√©rification de la session Jellyseerr...');

    state = JellyseerrAuthState.loading();

    try {
      // V√©rifier si une session valide existe
      final hasSession = await _storageService.hasValidJellyseerrSession();

      if (!hasSession) {
        debugPrint('‚ùå Aucune session valide trouv√©e');
        state = JellyseerrAuthState.unauthenticated();
        return;
      }

      // R√©cup√©rer les donn√©es stock√©es
      final serverUrl = _storageService.getJellyseerrServerUrl();
      final cookie = await _storageService.getJellyseerrCookie();

      if (serverUrl == null || cookie == null) {
        debugPrint('‚ùå Donn√©es de session incompl√®tes');
        state = JellyseerrAuthState.unauthenticated();
        return;
      }

      // R√©initialiser le client avec le cookie
      _jellyseerrService.initializeClient(serverUrl, cookie: cookie);

      // Pour l'instant, on consid√®re que la session est valide
      // Dans une version future, on pourrait faire un appel API pour v√©rifier
      debugPrint('‚úÖ Session Jellyseerr restaur√©e');
      state = JellyseerrAuthState.authenticated(
        JellyseerrAuthResponse(
          displayName: 'User', // Placeholder
        ),
      );
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la v√©rification de la session: $e');
      state = JellyseerrAuthState.unauthenticated();
    }
  }

  /// Cr√©e une nouvelle requ√™te
  Future<JellyseerrRequest> createRequest(CreateRequestBody request) async {
    if (!state.isAuthenticated) {
      throw Exception('Non authentifi√©');
    }

    try {
      return await _jellyseerrService.createRequest(request);
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la cr√©ation de la requ√™te: $e');
      rethrow;
    }
  }

  /// Supprime une requ√™te
  Future<void> deleteRequest(int requestId) async {
    if (!state.isAuthenticated) {
      throw Exception('Non authentifi√©');
    }

    try {
      await _jellyseerrService.deleteRequest(requestId);
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la suppression de la requ√™te: $e');
      rethrow;
    }
  }
}

