import 'dart:io';
import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import 'package:package_info_plus/package_info_plus.dart';
import 'package:path_provider/path_provider.dart';
import 'package:open_file/open_file.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/github_release.dart';

/// Service pour g√©rer les mises √† jour natives via GitHub Releases
class NativeUpdateService {
  NativeUpdateService._();

  static final NativeUpdateService instance = NativeUpdateService._();

  static const String _githubApiUrl =
      'https://api.github.com/repos/lxwiq/Jellyfish/releases/latest';
  
  static const String _keyLastNativeUpdateCheck = 'last_native_update_check';
  static const String _keySkippedVersion = 'skipped_update_version';

  final Dio _dio = Dio();

  /// V√©rifie si une mise √† jour native est disponible
  Future<GitHubRelease?> checkForUpdate() async {
    try {
      // R√©cup√©rer la version actuelle
      final packageInfo = await PackageInfo.fromPlatform();
      final currentVersion = packageInfo.version;

      print('üîç V√©rification des mises √† jour natives...');
      print('   Version actuelle: $currentVersion');

      // R√©cup√©rer la derni√®re release depuis GitHub
      final response = await _dio.get(_githubApiUrl);

      if (response.statusCode == 200) {
        final release = GitHubRelease.fromJson(response.data);

        print('   Derni√®re version: ${release.version}');

        // Enregistrer la date de v√©rification
        await _saveLastUpdateCheck();

        // Comparer les versions
        if (_isNewerVersion(release.version, currentVersion)) {
          // V√©rifier si cette version n'a pas √©t√© ignor√©e
          final skippedVersion = await getSkippedVersion();
          if (skippedVersion == release.version) {
            print('   ‚è≠Ô∏è  Version ignor√©e par l\'utilisateur');
            return null;
          }

          print('   ‚úÖ Mise √† jour disponible !');
          return release;
        } else {
          print('   ‚úÖ Application √† jour');
          return null;
        }
      }

      return null;
    } catch (e) {
      print('‚ùå Erreur lors de la v√©rification de mise √† jour native: $e');
      return null;
    }
  }

  /// T√©l√©charge et installe une mise √† jour
  Future<bool> downloadAndInstall(
    GitHubRelease release, {
    Function(double)? onProgress,
  }) async {
    try {
      // D√©terminer l'asset √† t√©l√©charger selon la plateforme
      GitHubAsset? asset;
      
      if (Platform.isAndroid) {
        asset = release.androidAsset;
      } else if (Platform.isWindows) {
        asset = release.windowsAsset;
      } else if (Platform.isMacOS) {
        asset = release.macOSAsset;
      } else if (Platform.isLinux) {
        asset = release.linuxAsset;
      }

      if (asset == null) {
        print('‚ùå Aucun asset disponible pour cette plateforme');
        return false;
      }

      print('üì• T√©l√©chargement de ${asset.name} (${asset.formattedSize})...');

      // Cr√©er le dossier de t√©l√©chargement
      final tempDir = await getTemporaryDirectory();
      final filePath = '${tempDir.path}/${asset.name}';

      // T√©l√©charger le fichier
      await _dio.download(
        asset.browserDownloadUrl,
        filePath,
        onReceiveProgress: (received, total) {
          if (total != -1 && onProgress != null) {
            final progress = received / total;
            onProgress(progress);
          }
        },
      );

      print('‚úÖ T√©l√©chargement termin√©: $filePath');

      // Installer selon la plateforme
      if (Platform.isAndroid) {
        return await _installAndroid(filePath);
      } else if (Platform.isWindows) {
        return await _installWindows(filePath);
      } else if (Platform.isMacOS) {
        return await _installMacOS(filePath);
      } else if (Platform.isLinux) {
        return await _installLinux(filePath);
      }

      return false;
    } catch (e) {
      print('‚ùå Erreur lors du t√©l√©chargement/installation: $e');
      return false;
    }
  }

  /// Installe l'APK sur Android
  Future<bool> _installAndroid(String filePath) async {
    try {
      print('üì± Ouverture de l\'installateur Android...');
      final result = await OpenFile.open(filePath);
      
      if (result.type == ResultType.done) {
        print('‚úÖ Installateur ouvert avec succ√®s');
        return true;
      } else {
        print('‚ùå Erreur lors de l\'ouverture: ${result.message}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de l\'installation Android: $e');
      return false;
    }
  }

  /// Lance l'installateur sur Windows
  Future<bool> _installWindows(String filePath) async {
    try {
      print('ü™ü Lancement de l\'installateur Windows...');
      
      // Lancer l'installateur en mode silencieux
      final result = await Process.run(
        filePath,
        ['/SILENT', '/CLOSEAPPLICATIONS', '/RESTARTAPPLICATIONS'],
      );

      if (result.exitCode == 0) {
        print('‚úÖ Installateur lanc√© avec succ√®s');
        // L'application va se fermer et se mettre √† jour
        exit(0);
      } else {
        print('‚ùå Erreur lors du lancement: ${result.stderr}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de l\'installation Windows: $e');
      return false;
    }
  }

  /// Ouvre le DMG sur macOS
  Future<bool> _installMacOS(String filePath) async {
    try {
      print('üçé Ouverture du DMG macOS...');
      final result = await OpenFile.open(filePath);
      
      if (result.type == ResultType.done) {
        print('‚úÖ DMG ouvert avec succ√®s');
        return true;
      } else {
        print('‚ùå Erreur lors de l\'ouverture: ${result.message}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de l\'installation macOS: $e');
      return false;
    }
  }

  /// Ouvre l'AppImage sur Linux
  Future<bool> _installLinux(String filePath) async {
    try {
      print('üêß Ouverture de l\'AppImage Linux...');
      
      // Rendre le fichier ex√©cutable
      await Process.run('chmod', ['+x', filePath]);
      
      final result = await OpenFile.open(filePath);
      
      if (result.type == ResultType.done) {
        print('‚úÖ AppImage ouvert avec succ√®s');
        return true;
      } else {
        print('‚ùå Erreur lors de l\'ouverture: ${result.message}');
        return false;
      }
    } catch (e) {
      print('‚ùå Erreur lors de l\'installation Linux: $e');
      return false;
    }
  }

  /// Compare deux versions (retourne true si newVersion > currentVersion)
  bool _isNewerVersion(String newVersion, String currentVersion) {
    try {
      final newParts = newVersion.split('.').map(int.parse).toList();
      final currentParts = currentVersion.split('.').map(int.parse).toList();

      for (int i = 0; i < newParts.length && i < currentParts.length; i++) {
        if (newParts[i] > currentParts[i]) return true;
        if (newParts[i] < currentParts[i]) return false;
      }

      return newParts.length > currentParts.length;
    } catch (e) {
      print('‚ùå Erreur lors de la comparaison de versions: $e');
      return false;
    }
  }

  /// Marque une version comme ignor√©e
  Future<void> skipVersion(String version) async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(_keySkippedVersion, version);
    print('‚è≠Ô∏è  Version $version ignor√©e');
  }

  /// R√©cup√®re la version ignor√©e
  Future<String?> getSkippedVersion() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString(_keySkippedVersion);
  }

  /// Efface la version ignor√©e
  Future<void> clearSkippedVersion() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.remove(_keySkippedVersion);
  }

  /// R√©cup√®re la date de la derni√®re v√©rification
  Future<DateTime?> getLastUpdateCheck() async {
    final prefs = await SharedPreferences.getInstance();
    final dateStr = prefs.getString(_keyLastNativeUpdateCheck);
    if (dateStr == null) return null;
    return DateTime.tryParse(dateStr);
  }

  /// Sauvegarde la date de derni√®re v√©rification
  Future<void> _saveLastUpdateCheck() async {
    final prefs = await SharedPreferences.getInstance();
    await prefs.setString(
      _keyLastNativeUpdateCheck,
      DateTime.now().toIso8601String(),
    );
  }
}

