import 'dart:convert';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/app_settings.dart';

/// Service de gestion des param√®tres de l'application
class SettingsService {
  static const String _keySettings = 'app_settings';
  
  final SharedPreferences _prefs;

  SettingsService(this._prefs);

  /// Charge les param√®tres depuis le stockage
  Future<AppSettings> loadSettings() async {
    final settingsJson = _prefs.getString(_keySettings);
    
    if (settingsJson == null) {
      print('üìù Aucun param√®tre sauvegard√©, utilisation des valeurs par d√©faut');
      return AppSettings.defaults();
    }
    
    try {
      final settingsMap = jsonDecode(settingsJson) as Map<String, dynamic>;
      final settings = AppSettings.fromJson(settingsMap);
      print('‚úÖ Param√®tres charg√©s avec succ√®s');
      return settings;
    } catch (e) {
      print('‚ùå Erreur lors du chargement des param√®tres: $e');
      print('   Utilisation des valeurs par d√©faut');
      return AppSettings.defaults();
    }
  }

  /// Sauvegarde les param√®tres dans le stockage
  Future<void> saveSettings(AppSettings settings) async {
    try {
      final settingsJson = jsonEncode(settings.toJson());
      await _prefs.setString(_keySettings, settingsJson);
      print('‚úÖ Param√®tres sauvegard√©s avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur lors de la sauvegarde des param√®tres: $e');
      rethrow;
    }
  }

  /// R√©initialise tous les param√®tres aux valeurs par d√©faut
  Future<void> resetSettings() async {
    await _prefs.remove(_keySettings);
    print('üîÑ Param√®tres r√©initialis√©s aux valeurs par d√©faut');
  }

  /// Exporte les param√®tres en JSON
  String exportSettings(AppSettings settings) {
    return jsonEncode(settings.toJson());
  }

  /// Importe les param√®tres depuis JSON
  AppSettings importSettings(String json) {
    try {
      final settingsMap = jsonDecode(json) as Map<String, dynamic>;
      return AppSettings.fromJson(settingsMap);
    } catch (e) {
      print('‚ùå Erreur lors de l\'importation des param√®tres: $e');
      rethrow;
    }
  }

  // ========== M√©thodes de mise √† jour rapide ==========

  /// Met √† jour les pr√©f√©rences vid√©o
  Future<void> updateVideoPreferences(
    AppSettings currentSettings,
    VideoPreferences videoPreferences,
  ) async {
    final newSettings = currentSettings.copyWith(video: videoPreferences);
    await saveSettings(newSettings);
  }

  /// Met √† jour les pr√©f√©rences de t√©l√©chargement
  Future<void> updateDownloadPreferences(
    AppSettings currentSettings,
    DownloadPreferences downloadPreferences,
  ) async {
    final newSettings = currentSettings.copyWith(downloads: downloadPreferences);
    await saveSettings(newSettings);
  }

  /// Met √† jour les pr√©f√©rences de notifications
  Future<void> updateNotificationPreferences(
    AppSettings currentSettings,
    NotificationPreferences notificationPreferences,
  ) async {
    final newSettings = currentSettings.copyWith(notifications: notificationPreferences);
    await saveSettings(newSettings);
  }

  /// Met √† jour les pr√©f√©rences d'interface
  Future<void> updateInterfacePreferences(
    AppSettings currentSettings,
    InterfacePreferences interfacePreferences,
  ) async {
    final newSettings = currentSettings.copyWith(interface: interfacePreferences);
    await saveSettings(newSettings);
  }

  /// Met √† jour les pr√©f√©rences serveurs
  Future<void> updateServerPreferences(
    AppSettings currentSettings,
    ServerPreferences serverPreferences,
  ) async {
    final newSettings = currentSettings.copyWith(servers: serverPreferences);
    await saveSettings(newSettings);
  }

  /// Met √† jour les pr√©f√©rences de mises √† jour
  Future<void> updateUpdatePreferences(
    AppSettings currentSettings,
    UpdatePreferences updatePreferences,
  ) async {
    final newSettings = currentSettings.copyWith(updates: updatePreferences);
    await saveSettings(newSettings);
  }

  /// Met √† jour les pr√©f√©rences de cache
  Future<void> updateCachePreferences(
    AppSettings currentSettings,
    CachePreferences cachePreferences,
  ) async {
    final newSettings = currentSettings.copyWith(cache: cachePreferences);
    await saveSettings(newSettings);
  }
}

