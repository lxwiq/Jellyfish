import 'dart:async';
import 'dart:io';
import 'package:flutter/foundation.dart' show kIsWeb;
import 'package:flutter_chrome_cast/flutter_chrome_cast.dart';
import 'package:logging/logging.dart';

/// Service complet pour g√©rer les fonctionnalit√©s de Chromecast
///
/// Ce service utilise le package flutter_chrome_cast pour g√©rer :
/// - La d√©couverte et connexion aux appareils
/// - Le contr√¥le de la lecture (play, pause, seek, stop)
/// - La gestion des sous-titres et pistes audio
/// - Le contr√¥le du volume
/// - La gestion de la file d'attente
class CastService {
  static final CastService _instance = CastService._internal();
  factory CastService() => _instance;
  CastService._internal();

  final _logger = Logger('CastService');

  // Getters pour acc√©der aux streams du package
  Stream<GoogleCastSession?> get sessionStream =>
      GoogleCastSessionManager.instance.currentSessionStream;

  Stream<List<GoogleCastDevice>> get devicesStream =>
      GoogleCastDiscoveryManager.instance.devicesStream;

  Stream<GoggleCastMediaStatus?> get mediaStatusStream =>
      GoogleCastRemoteMediaClient.instance.mediaStatusStream;

  // Getters pour l'√©tat actuel
  bool get isConnected =>
      GoogleCastSessionManager.instance.connectionState ==
      GoogleCastConnectState.connected;

  bool get isPlaying =>
      GoogleCastRemoteMediaClient.instance.mediaStatus?.playerState ==
      CastMediaPlayerState.playing;

  bool get isPaused =>
      GoogleCastRemoteMediaClient.instance.mediaStatus?.playerState ==
      CastMediaPlayerState.paused;

  bool get isBuffering =>
      GoogleCastRemoteMediaClient.instance.mediaStatus?.playerState ==
      CastMediaPlayerState.buffering;

  Duration get currentPosition =>
      GoogleCastRemoteMediaClient.instance.playerPosition;

  Duration? get duration =>
      GoogleCastRemoteMediaClient.instance.mediaStatus?.mediaInformation?.duration;

  GoogleCastSession? get currentSession =>
      GoogleCastSessionManager.instance.currentSession;

  GoggleCastMediaStatus? get mediaStatus =>
      GoogleCastRemoteMediaClient.instance.mediaStatus;

  /// Initialise le service de cast
  Future<void> initialize() async {
    try {
      _logger.info('üé¨ Initialisation du service Cast');

      // Utiliser l'ID d'application par d√©faut de Google Cast
      const appId = GoogleCastDiscoveryCriteria.kDefaultApplicationId;
      _logger.info('üì± App ID: $appId');

      GoogleCastOptions? options;

      if (kIsWeb) {
        _logger.info('üåê Cast non disponible sur Web');
        return;
      } else if (Platform.isIOS) {
        _logger.info('üçé Configuration iOS');
        options = IOSGoogleCastOptions(
          GoogleCastDiscoveryCriteriaInitialize.initWithApplicationID(appId),
        );
      } else if (Platform.isAndroid) {
        _logger.info('ü§ñ Configuration Android');
        options = GoogleCastOptionsAndroid(
          appId: appId,
        );
      }

      if (options != null) {
        // Initialiser le contexte Google Cast
        _logger.info('‚öôÔ∏è Initialisation du contexte Google Cast...');
        GoogleCastContext.instance.setSharedInstanceWithOptions(options);
        _logger.info('‚úÖ Contexte Google Cast initialis√©');

        // √âcouter les changements de session
        sessionStream.listen((session) {
          _logger.info('üì° Session chang√©e: ${session?.device?.friendlyName ?? "null"}');
        });

        // √âcouter les appareils d√©couverts
        devicesStream.listen((devices) {
          _logger.info('üîç Appareils d√©couverts: ${devices.length}');
          for (var device in devices) {
            _logger.info('   - ${device.friendlyName} (${device.modelName})');
          }
        });

        // D√©marrer la d√©couverte des appareils
        await startDiscovery();

        _logger.info('‚úÖ Service Cast initialis√© avec succ√®s');
      } else {
        _logger.warning('‚ö†Ô∏è Plateforme non support√©e pour le Cast');
      }
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors de l\'initialisation du Cast', e, stackTrace);
      rethrow;
    }
  }

  /// D√©marre la d√©couverte des appareils Chromecast
  Future<void> startDiscovery() async {
    try {
      _logger.info('üîç D√©marrage de la d√©couverte des appareils Chromecast...');
      GoogleCastDiscoveryManager.instance.startDiscovery();
      _logger.info('‚úÖ D√©couverte d√©marr√©e');
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors de la d√©couverte', e, stackTrace);
    }
  }

  /// Arr√™te la d√©couverte des appareils
  Future<void> stopDiscovery() async {
    try {
      GoogleCastDiscoveryManager.instance.stopDiscovery();
      _logger.info('D√©couverte arr√™t√©e');
    } catch (e, stackTrace) {
      _logger.severe('Erreur lors de l\'arr√™t de la d√©couverte', e, stackTrace);
    }
  }

  /// Se connecte √† un appareil Chromecast
  Future<bool> connectToDevice(GoogleCastDevice device) async {
    try {
      _logger.info('Connexion √† l\'appareil: \${device.friendlyName}');
      await GoogleCastSessionManager.instance.startSessionWithDevice(device);
      return true;
    } catch (e, stackTrace) {
      _logger.severe('Erreur lors de la connexion', e, stackTrace);
      return false;
    }
  }

  /// Se d√©connecte de l'appareil actuel
  Future<void> disconnect() async {
    try {
      _logger.info('D√©connexion de l\'appareil');
      await GoogleCastSessionManager.instance.endSessionAndStopCasting();
    } catch (e, stackTrace) {
      _logger.severe('Erreur lors de la d√©connexion', e, stackTrace);
    }
  }

  /// Charge et lit un m√©dia sur le Chromecast avec support complet
  Future<bool> loadMedia({
    required String url,
    required String title,
    String? subtitle,
    String? imageUrl,
    Duration? startPosition,
    String? contentType,
    List<GoogleCastMediaTrack>? subtitleTracks,
    List<int>? activeTrackIds,
  }) async {
    try {
      _logger.info('üé¨ Chargement du m√©dia: $title');
      _logger.info('üìç URL: $url');
      _logger.info('‚è±Ô∏è Position de d√©part: ${startPosition?.inSeconds ?? 0}s');
      if (subtitleTracks != null && subtitleTracks.isNotEmpty) {
        _logger.info('üìù Sous-titres disponibles: ${subtitleTracks.length}');
      }

      // Cr√©er les m√©tadonn√©es du m√©dia
      final metadata = GoogleCastMovieMediaMetadata(
        title: title,
        subtitle: subtitle,
        studio: 'Jellyfin',
        releaseDate: DateTime.now(),
        images: imageUrl != null
            ? [
                GoogleCastImage(
                  url: Uri.parse(imageUrl),
                  height: 480,
                  width: 854,
                )
              ]
            : [],
      );

      // Cr√©er l'information du m√©dia (cross-platform)
      final mediaInfo = GoogleCastMediaInformation(
        contentId: url,
        streamType: CastMediaStreamType.buffered,
        contentUrl: Uri.parse(url),
        contentType: contentType ?? 'video/mp4',
        metadata: metadata,
        tracks: subtitleTracks ?? [],
      );

      _logger.info('üì§ Envoi du m√©dia au Chromecast...');

      // Charger le m√©dia avec les pistes actives
      await GoogleCastRemoteMediaClient.instance.loadMedia(
        mediaInfo,
        autoPlay: true,
        playPosition: startPosition ?? Duration.zero,
        playbackRate: 1.0,
        activeTrackIds: activeTrackIds,
      );

      _logger.info('‚úÖ M√©dia charg√© avec succ√®s');
      return true;
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors du chargement du m√©dia', e, stackTrace);
      return false;
    }
  }

  /// Charge un m√©dia dans une file d'attente
  Future<bool> loadMediaQueue({
    required List<GoogleCastQueueItem> items,
    int startIndex = 0,
    Duration? startPosition,
  }) async {
    try {
      _logger.info('üé¨ Chargement de la file d\'attente: ${items.length} √©l√©ments');

      await GoogleCastRemoteMediaClient.instance.queueLoadItems(
        items,
        options: GoogleCastQueueLoadOptions(
          startIndex: startIndex,
          playPosition: startPosition ?? Duration.zero,
        ),
      );

      _logger.info('‚úÖ File d\'attente charg√©e avec succ√®s');
      return true;
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors du chargement de la file d\'attente', e, stackTrace);
      return false;
    }
  }

  /// Lit le m√©dia en cours
  Future<void> play() async {
    try {
      await GoogleCastRemoteMediaClient.instance.play();
      _logger.info('Lecture d√©marr√©e');
    } catch (e, stackTrace) {
      _logger.severe('Erreur lors de la lecture', e, stackTrace);
    }
  }

  /// Met en pause le m√©dia en cours
  Future<void> pause() async {
    try {
      await GoogleCastRemoteMediaClient.instance.pause();
      _logger.info('Lecture mise en pause');
    } catch (e, stackTrace) {
      _logger.severe('Erreur lors de la mise en pause', e, stackTrace);
    }
  }

  /// Arr√™te la lecture
  Future<void> stop() async {
    try {
      await GoogleCastRemoteMediaClient.instance.stop();
      _logger.info('Lecture arr√™t√©e');
    } catch (e, stackTrace) {
      _logger.severe('Erreur lors de l\'arr√™t', e, stackTrace);
    }
  }

  /// Se d√©place √† une position sp√©cifique
  Future<void> seek(Duration position) async {
    try {
      await GoogleCastRemoteMediaClient.instance.seek(
        GoogleCastMediaSeekOption(position: position),
      );
      _logger.info('Seek √† \${position.inSeconds}s');
    } catch (e, stackTrace) {
      _logger.severe('Erreur lors du seek', e, stackTrace);
    }
  }

  /// Bascule entre lecture et pause
  Future<void> togglePlayPause() async {
    if (isPlaying) {
      await pause();
    } else {
      await play();
    }
  }

  // ============ Contr√¥les de la file d'attente ============

  /// Passe √† l'√©l√©ment suivant de la file d'attente
  Future<void> queueNext() async {
    try {
      await GoogleCastRemoteMediaClient.instance.queueNextItem();
      _logger.info('‚è≠Ô∏è Passage √† l\'√©l√©ment suivant');
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors du passage √† l\'√©l√©ment suivant', e, stackTrace);
    }
  }

  /// Revient √† l'√©l√©ment pr√©c√©dent de la file d'attente
  Future<void> queuePrevious() async {
    try {
      await GoogleCastRemoteMediaClient.instance.queuePrevItem();
      _logger.info('‚èÆÔ∏è Retour √† l\'√©l√©ment pr√©c√©dent');
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors du retour √† l\'√©l√©ment pr√©c√©dent', e, stackTrace);
    }
  }

  /// Ins√®re un √©l√©ment dans la file d'attente
  Future<void> queueInsertItem(GoogleCastQueueItem item, {int? beforeItemId}) async {
    try {
      await GoogleCastRemoteMediaClient.instance.queueInsertItems(
        [item],
        beforeItemWithId: beforeItemId,
      );
      _logger.info('‚ûï √âl√©ment ajout√© √† la file d\'attente');
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors de l\'ajout √† la file d\'attente', e, stackTrace);
    }
  }

  // ============ Contr√¥les des sous-titres ============

  /// Active ou d√©sactive une piste de sous-titres
  /// Note: setActiveTrackIds n'est pas disponible dans la version actuelle du package
  /// Les pistes doivent √™tre activ√©es lors du chargement du m√©dia via loadMedia()
  Future<void> setActiveTrack(int? trackId) async {
    try {
      _logger.warning('‚ö†Ô∏è setActiveTrack: Cette fonctionnalit√© n√©cessite de recharger le m√©dia avec les nouvelles pistes actives');
      _logger.info('üí° Utilisez loadMedia() avec le param√®tre activeTrackIds pour activer les pistes');

      // TODO: Impl√©menter le rechargement du m√©dia avec les nouvelles pistes actives
      // Cela n√©cessiterait de sauvegarder l'√©tat actuel du m√©dia et de le recharger
      // avec les nouveaux activeTrackIds

      if (trackId == null) {
        _logger.info('üìù Demande de d√©sactivation des sous-titres');
      } else {
        _logger.info('üìù Demande d\'activation de la piste: $trackId');
      }
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors du changement de piste', e, stackTrace);
    }
  }

  /// R√©cup√®re les pistes disponibles
  List<GoogleCastMediaTrack>? getAvailableTracks() {
    return mediaStatus?.mediaInformation?.tracks;
  }

  /// R√©cup√®re les IDs des pistes actives
  List<int>? getActiveTrackIds() {
    return mediaStatus?.activeTrackIds;
  }

  // ============ Contr√¥les du volume ============
  // Note: Les m√©thodes de contr√¥le du volume ne sont pas disponibles dans la version actuelle
  // du package flutter_chrome_cast. Le contr√¥le du volume doit √™tre fait via l'interface
  // utilisateur native du Chromecast ou via les contr√¥les syst√®me de l'appareil.

  /// D√©finit le volume (0.0 √† 1.0)
  /// Note: setVolume n'est pas disponible dans la version actuelle du package
  Future<void> setVolume(double volume) async {
    try {
      final clampedVolume = volume.clamp(0.0, 1.0);
      _logger.warning('‚ö†Ô∏è setVolume: Cette fonctionnalit√© n\'est pas disponible dans la version actuelle du package');
      _logger.info('üí° Utilisez les contr√¥les syst√®me ou l\'interface Chromecast pour ajuster le volume');
      _logger.info('üîä Volume demand√©: ${(clampedVolume * 100).toInt()}%');
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors du changement de volume', e, stackTrace);
    }
  }

  /// Active ou d√©sactive le mode muet
  /// Note: setMute n'est pas disponible dans la version actuelle du package
  Future<void> setMuted(bool muted) async {
    try {
      _logger.warning('‚ö†Ô∏è setMuted: Cette fonctionnalit√© n\'est pas disponible dans la version actuelle du package');
      _logger.info('üí° Utilisez les contr√¥les syst√®me ou l\'interface Chromecast pour couper/activer le son');
      _logger.info(muted ? 'üîá Demande de coupure du son' : 'üîä Demande d\'activation du son');
    } catch (e, stackTrace) {
      _logger.severe('‚ùå Erreur lors du changement de muet', e, stackTrace);
    }
  }

  /// R√©cup√®re le volume actuel (0.0 √† 1.0)
  /// Note: volume getter n'est pas disponible dans la version actuelle du package
  double? getVolume() {
    _logger.warning('‚ö†Ô∏è getVolume: Cette fonctionnalit√© n\'est pas disponible dans la version actuelle du package');
    return null; // currentSession?.volume; // Non disponible
  }

  /// V√©rifie si le son est coup√©
  /// Note: isMuted getter n'est pas disponible dans la version actuelle du package
  bool? isMuted() {
    _logger.warning('‚ö†Ô∏è isMuted: Cette fonctionnalit√© n\'est pas disponible dans la version actuelle du package');
    return null; // currentSession?.isMuted; // Non disponible
  }

  // ============ Utilitaires ============

  /// R√©cup√®re le nom de l'appareil connect√©
  String? getConnectedDeviceName() {
    return currentSession?.device?.friendlyName;
  }

  /// R√©cup√®re les informations du m√©dia en cours
  GoogleCastMediaInformation? getCurrentMediaInfo() {
    return mediaStatus?.mediaInformation;
  }

  /// V√©rifie si un m√©dia est charg√©
  bool get hasMedia => mediaStatus?.mediaInformation != null;

  /// Nettoie les ressources
  void dispose() {
    stopDiscovery();
  }
}
