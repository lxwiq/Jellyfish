import 'dart:async';
import 'package:background_downloader/background_downloader.dart';
import 'package:uuid/uuid.dart';
import 'package:connectivity_plus/connectivity_plus.dart';
import '../models/downloaded_item.dart';
import '../models/download_status.dart';
import '../jellyfin/jellyfin_open_api.swagger.dart';
import 'offline_storage_service.dart';
import 'offline_notification_service.dart';
import 'jellyfin_service.dart';

// Import pour DownloadQuality
export '../models/download_status.dart' show DownloadQuality;

/// Service principal de gestion des t√©l√©chargements hors ligne
class OfflineDownloadService {
  final OfflineStorageService _storageService;
  final OfflineNotificationService _notificationService;
  final JellyfinService _jellyfinService;
  final Uuid _uuid = const Uuid();

  // Stream controller pour les mises √† jour de progression
  final _progressController = StreamController<DownloadedItem>.broadcast();
  Stream<DownloadedItem> get progressStream => _progressController.stream;

  // Map pour suivre les t√¢ches actives
  final Map<String, DownloadTask> _activeTasks = {};

  // Map pour faire correspondre taskId (background_downloader) -> downloadId (notre DB)
  final Map<String, String> _taskIdMapping = {};

  // Connectivit√©
  final Connectivity _connectivity = Connectivity();
  StreamSubscription<List<ConnectivityResult>>? _connectivitySubscription;

  bool _initialized = false;

  OfflineDownloadService(
    this._storageService,
    this._notificationService,
    this._jellyfinService,
  );

  /// Initialise le service de t√©l√©chargement
  Future<void> initialize() async {
    if (_initialized) return;

    print('üì• Initialisation du service de t√©l√©chargement');

    // D√©marrer le FileDownloader et reprogrammer les t√¢ches tu√©es
    await FileDownloader().start(doRescheduleKilledTasks: true);

    // Activer le tracking des t√¢ches pour la persistance
    await FileDownloader().trackTasks();

    // Configurer les callbacks pour les mises √† jour
    FileDownloader().updates.listen(_handleDownloadUpdate);

    // Configurer les notifications par d√©faut
    await FileDownloader().configure(
      globalConfig: [
        (Config.requestTimeout, const Duration(seconds: 100)),
      ],
      androidConfig: [
        (Config.useCacheDir, Config.whenAble),
      ],
      iOSConfig: [
        (Config.localize, {'Cancel': 'Cancel'}),
      ],
    );

    // Restaurer le mapping des t√¢ches depuis la base de donn√©es du package
    await _restoreTaskMapping();

    // Restaurer les t√©l√©chargements en cours
    await _restorePendingDownloads();

    // Surveiller la connectivit√©
    _setupConnectivityMonitoring();

    _initialized = true;
    print('‚úÖ Service de t√©l√©chargement initialis√©');
  }

  /// Configure la surveillance de la connectivit√©
  void _setupConnectivityMonitoring() {
    _connectivitySubscription = _connectivity.onConnectivityChanged.listen(
      (results) {
        final isConnected = results.any((result) => 
          result != ConnectivityResult.none
        );
        
        if (isConnected) {
          print('üåê Connexion r√©tablie - reprise des t√©l√©chargements');
          _resumeAllPausedDownloads();
        } else {
          print('üì° Connexion perdue - pause des t√©l√©chargements');
          _pauseAllActiveDownloads();
        }
      },
    );
  }

  /// D√©marre un t√©l√©chargement
  Future<String> downloadItem(
    BaseItemDto item,
    DownloadQuality quality,
  ) async {
    if (!_initialized) {
      await initialize();
    }

    if (item.id == null) {
      throw Exception('Item ID is null');
    }

    print('üì• D√©marrage du t√©l√©chargement: ${item.name}');

    // V√©rifier si d√©j√† t√©l√©charg√©
    final existing = await _storageService.getDownloadedItemByJellyfinId(item.id!);
    if (existing != null && existing.isCompleted) {
      throw Exception('Item already downloaded');
    }

    // Cr√©er l'ID unique pour ce t√©l√©chargement
    final downloadId = _uuid.v4();

    // Obtenir l'URL de t√©l√©chargement
    final downloadUrl = _jellyfinService.getDirectDownloadUrl(
      item.id!,
      quality: quality.toDbString(),
    );

    // Cr√©er le chemin de t√©l√©chargement
    final filename = '${item.id}.mp4';
    final downloadPath = await _storageService.createDownloadPath(
      item.id!,
      item.type?.value ?? 'unknown',
      filename,
    );

    // Cr√©er l'entr√©e dans la base de donn√©es
    final downloadedItem = DownloadedItem(
      id: downloadId,
      itemId: item.id!,
      itemType: item.type?.value ?? 'unknown',
      title: item.name ?? 'Unknown',
      description: item.overview,
      imageUrl: _getImageUrl(item),
      downloadPath: downloadPath,
      status: DownloadStatus.pending,
      createdAt: DateTime.now(),
      quality: quality,
    );

    await _storageService.insertDownloadedItem(downloadedItem);

    // Obtenir le token d'authentification
    final token = await _jellyfinService.getAccessToken();

    // Cr√©er la t√¢che de t√©l√©chargement
    final task = DownloadTask(
      taskId: downloadId,
      url: downloadUrl,
      filename: filename,
      directory: downloadPath.substring(0, downloadPath.lastIndexOf('/')),
      headers: {
        if (token != null) 'Authorization': 'MediaBrowser Token="$token"',
      },
      updates: Updates.statusAndProgress,
      metaData: downloadId, // Stocker le downloadId dans les m√©tadonn√©es pour la restauration
    );

    // Enqueue la t√¢che
    final success = await FileDownloader().enqueue(task);

    if (success) {
      _activeTasks[downloadId] = task;

      // Enregistrer le mapping taskId -> downloadId
      // Note: Le taskId peut √™tre diff√©rent apr√®s l'enqueue
      _taskIdMapping[task.taskId] = downloadId;

      print('‚úÖ T√©l√©chargement en file d\'attente: ${item.name}');
      print('üîó Mapping cr√©√©: ${task.taskId} -> $downloadId');

      // Afficher la notification
      await _notificationService.showDownloadNotification(downloadedItem);
    } else {
      print('‚ùå √âchec de la mise en file d\'attente');
      throw Exception('Failed to enqueue download');
    }

    return downloadId;
  }

  /// G√®re les mises √† jour de t√©l√©chargement
  Future<void> _handleDownloadUpdate(TaskUpdate update) async {
    final taskId = update.task.taskId;

    // R√©cup√©rer le downloadId depuis le mapping
    final downloadId = _taskIdMapping[taskId];

    if (downloadId == null) {
      print('‚ö†Ô∏è Mapping non trouv√© pour taskId: $taskId');
      return;
    }

    final item = await _storageService.getDownloadedItem(downloadId);

    if (item == null) {
      print('‚ö†Ô∏è Item non trouv√© pour la mise √† jour: $downloadId');
      return;
    }

    DownloadedItem updatedItem;

    if (update is TaskStatusUpdate) {
      updatedItem = await _handleStatusUpdate(item, update);
    } else if (update is TaskProgressUpdate) {
      updatedItem = await _handleProgressUpdate(item, update);
    } else {
      return;
    }

    // Mettre √† jour la base de donn√©es
    await _storageService.updateDownloadedItem(updatedItem);

    // √âmettre l'√©v√©nement de progression
    _progressController.add(updatedItem);

    // Mettre √† jour la notification
    await _notificationService.updateDownloadNotification(updatedItem);
  }

  /// G√®re les mises √† jour de statut
  Future<DownloadedItem> _handleStatusUpdate(
    DownloadedItem item,
    TaskStatusUpdate update,
  ) async {
    print('üìä Mise √† jour du statut: ${item.title} -> ${update.status}');

    switch (update.status) {
      case TaskStatus.running:
        return item.copyWith(status: DownloadStatus.downloading);

      case TaskStatus.complete:
        _activeTasks.remove(item.id);
        _taskIdMapping.removeWhere((key, value) => value == item.id);
        return item.copyWith(
          status: DownloadStatus.completed,
          progress: 1.0,
          completedAt: DateTime.now(),
        );

      case TaskStatus.failed:
        _activeTasks.remove(item.id);
        _taskIdMapping.removeWhere((key, value) => value == item.id);
        return item.copyWith(
          status: DownloadStatus.failed,
          errorMessage: update.exception?.toString() ?? 'Unknown error',
        );

      case TaskStatus.paused:
        return item.copyWith(status: DownloadStatus.paused);

      case TaskStatus.canceled:
        _activeTasks.remove(item.id);
        _taskIdMapping.removeWhere((key, value) => value == item.id);
        return item.copyWith(status: DownloadStatus.cancelled);

      default:
        return item;
    }
  }

  /// G√®re les mises √† jour de progression
  Future<DownloadedItem> _handleProgressUpdate(
    DownloadedItem item,
    TaskProgressUpdate update,
  ) async {
    return item.copyWith(
      progress: update.progress,
      downloadedBytes: (update.progress * item.totalBytes).toInt(),
    );
  }

  /// Pause un t√©l√©chargement
  Future<void> pauseDownload(String downloadId) async {
    final task = _activeTasks[downloadId];
    if (task != null) {
      await FileDownloader().pause(task);
      print('‚è∏Ô∏è T√©l√©chargement en pause: $downloadId');
    }
  }

  /// Reprend un t√©l√©chargement
  Future<void> resumeDownload(String downloadId) async {
    final task = _activeTasks[downloadId];
    if (task != null) {
      await FileDownloader().resume(task);
      print('‚ñ∂Ô∏è T√©l√©chargement repris: $downloadId');
    } else {
      // Si la t√¢che n'est pas active, la recr√©er
      final item = await _storageService.getDownloadedItem(downloadId);
      if (item != null && (item.isPaused || item.isFailed)) {
        // TODO: Recr√©er la t√¢che de t√©l√©chargement
        print('üîÑ Recr√©ation de la t√¢che de t√©l√©chargement');
      }
    }
  }

  /// Annule un t√©l√©chargement
  Future<void> cancelDownload(String downloadId) async {
    final task = _activeTasks[downloadId];
    if (task != null) {
      await FileDownloader().cancel(task);
      _activeTasks.remove(downloadId);
      print('‚ùå T√©l√©chargement annul√©: $downloadId');
    }
  }

  /// Supprime un t√©l√©chargement
  Future<void> deleteDownload(String downloadId) async {
    await cancelDownload(downloadId);
    await _storageService.deleteDownloadedItem(downloadId);
    await _notificationService.cancelNotification(downloadId.hashCode);
    print('üóëÔ∏è T√©l√©chargement supprim√©: $downloadId');
  }

  /// Pause tous les t√©l√©chargements actifs
  Future<void> _pauseAllActiveDownloads() async {
    for (final downloadId in _activeTasks.keys.toList()) {
      await pauseDownload(downloadId);
    }
  }

  /// Reprend tous les t√©l√©chargements en pause
  Future<void> _resumeAllPausedDownloads() async {
    final pausedItems = await _storageService.getDownloadedItemsByStatus(
      DownloadStatus.paused,
    );

    for (final item in pausedItems) {
      await resumeDownload(item.id);
    }
  }

  /// R√©cup√®re tous les t√©l√©chargements
  Future<List<DownloadedItem>> getAllDownloads() async {
    return await _storageService.getAllDownloadedItems();
  }

  /// R√©cup√®re les t√©l√©chargements par statut
  Future<List<DownloadedItem>> getDownloadsByStatus(DownloadStatus status) async {
    return await _storageService.getDownloadedItemsByStatus(status);
  }

  /// R√©cup√®re les t√©l√©chargements actifs
  Future<List<DownloadedItem>> getActiveDownloads() async {
    return await _storageService.getActiveDownloads();
  }

  /// Restaure le mapping des t√¢ches depuis la base de donn√©es du package
  Future<void> _restoreTaskMapping() async {
    try {
      // R√©cup√©rer tous les enregistrements de t√¢ches depuis la base de donn√©es du package
      final records = await FileDownloader().database.allRecords();

      print('üîÑ Restauration du mapping pour ${records.length} t√¢ches');

      int restoredCount = 0;
      int orphanedCount = 0;

      for (final record in records) {
        final taskId = record.taskId;
        final task = record.task;

        // Extraire le downloadId depuis les m√©tadonn√©es
        final downloadId = task.metaData;

        if (downloadId == null || downloadId.isEmpty) {
          print('‚ö†Ô∏è T√¢che sans m√©tadonn√©es: $taskId');
          orphanedCount++;
          // Annuler la t√¢che orpheline
          await FileDownloader().cancelTaskWithId(taskId);
          continue;
        }

        // V√©rifier que l'item existe dans notre base de donn√©es
        final item = await _storageService.getDownloadedItem(downloadId);

        if (item == null) {
          print('‚ö†Ô∏è Item non trouv√© pour downloadId: $downloadId (taskId: $taskId)');
          orphanedCount++;
          // Annuler la t√¢che orpheline
          await FileDownloader().cancelTaskWithId(taskId);
          continue;
        }

        // Restaurer le mapping
        _taskIdMapping[taskId] = downloadId;

        // Restaurer la t√¢che active si elle est en cours
        if (record.status == TaskStatus.running ||
            record.status == TaskStatus.enqueued ||
            record.status == TaskStatus.paused) {
          _activeTasks[downloadId] = task as DownloadTask;
        }

        restoredCount++;
      }

      print('‚úÖ Mapping restaur√©: $restoredCount t√¢ches, $orphanedCount orphelines nettoy√©es');
    } catch (e) {
      print('‚ùå Erreur lors de la restauration du mapping: $e');
    }
  }

  /// Restaure les t√©l√©chargements en attente au d√©marrage
  Future<void> _restorePendingDownloads() async {
    final downloadingItems = await _storageService.getDownloadedItemsByStatus(
      DownloadStatus.downloading,
    );

    print('üîÑ Restauration de ${downloadingItems.length} t√©l√©chargements');

    for (final item in downloadingItems) {
      // Marquer comme en attente pour reprise
      await _storageService.updateDownloadedItem(
        item.copyWith(status: DownloadStatus.pending),
      );
    }
  }

  /// Obtient l'URL de l'image
  String? _getImageUrl(BaseItemDto item) {
    if (item.id == null) return null;
    final primaryTag = item.imageTags?['Primary'];
    if (primaryTag != null) {
      return _jellyfinService.getImageUrl(item.id!, tag: primaryTag);
    }
    return null;
  }

  /// Nettoie les ressources
  void dispose() {
    _progressController.close();
    _connectivitySubscription?.cancel();
    print('üßπ Service de t√©l√©chargement nettoy√©');
  }
}

