#!/bin/bash

# Script alternatif pour compiler Flutter
# Utilise une image Linux au lieu de Windows (compatible avec Mac M1/M2)

set -e

echo "üöÄ Compilation alternative de Jellyfish avec Docker (Linux)..."
echo "‚ö†Ô∏è  Note: Cette m√©thode cr√©e un build Linux, pas Windows"
echo "‚ö†Ô∏è  Pour un vrai build Windows, utilisez GitHub Actions"

# Ajouter Docker au PATH si n√©cessaire
if ! command -v docker &> /dev/null; then
    export PATH="/Applications/Docker.app/Contents/Resources/bin:$PATH"
fi

# Nom de l'image Docker
IMAGE_NAME="jellyfish-linux-builder"

# R√©pertoire de sortie pour les binaires
OUTPUT_DIR="./build_linux"

# Cr√©er le r√©pertoire de sortie s'il n'existe pas
mkdir -p "$OUTPUT_DIR"

echo "üì¶ Construction de l'image Docker Linux..."
docker build -f Dockerfile.linux-cross -t "$IMAGE_NAME" .

echo "üî® Compilation de l'application Flutter..."
docker run --rm \
    -v "$(pwd)/$OUTPUT_DIR:/output" \
    "$IMAGE_NAME" \
    bash -c "/build.sh && cp -r build/linux/x64/release/bundle/* /output/"

echo "‚úÖ Compilation termin√©e !"
echo "üìÅ Les fichiers compil√©s se trouvent dans : $OUTPUT_DIR"
echo ""
echo "Contenu du r√©pertoire de sortie :"
ls -la "$OUTPUT_DIR"

echo ""
echo "‚ö†Ô∏è  IMPORTANT: Ce build est pour Linux, pas Windows !"
echo "üéØ Pour un vrai build Windows, utilisez une de ces m√©thodes :"
echo "   1. GitHub Actions (recommand√©) - voir .github/workflows/build-windows.yml"
echo "   2. Un PC Windows avec Docker"
echo "   3. Une VM Windows"
